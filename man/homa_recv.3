.TH HOMA_RECV 3 2021-08-24 "Homa" "Linux Programmer's Manual"
.SH NAME
homa_recv \- receive a Homa message
.SH SYNOPSIS
.nf
.B #include <homa.h>
.PP
.BI "ssize_t homa_recv(int " sockfd ", const void *" message_buf ", size_t " \
length ", int " flags ,
.BI "                  const sockaddr_in_union *" src_addr ", uint64_t *" \
id ", size_t *" msglen ,
.BI "                  uint64_t *" completion_cookie );
.BI "ssize_t homa_recvv(int " sockfd ", const struct iovec *" iov ", \
size_t " iovcnt ", int " flags ,
.BI "                  const sockaddr_in_union *" src_addr ", uint64_t *" id \
", size_t *" msglen ,
.BI "                  uint64_t *" completion_cookie );
.PP
.BI "ssize_t homa_recvp(int " sockfd ", struct homa_recv_args *" args );
.fi
.SH DESCRIPTION
The functions
.BR homa_recv (),
.BR homa_recvv(),
and
.BR homa_recvp()
wait for an incoming Homa message and return its contents.
The argument
.I sockfd
is the file descriptor of a Homa socket on which to receive the message.
.B homa_recv
will store the message contents in a single contiguous buffer:
.I message_buf
provides the address of the buffer, and
.I length
specifies its length.
.B homa_recvv
will scatter the message contents across multiple buffers:
.I iov
provides the address of the first buffer descriptor, and
.I iovcnt
indicates how many buffer descriptors are present at
.IR iov .
Other than this distinction, the two functions behave identically.
.PP
The
.IR flags
argument is an ORed combination of the following values:
.TP
.B HOMA_RECV_REQUEST
Any incoming request message may be returned.
.TP
.B HOMA_RECV_RESPONSE
Any incoming response message may be returned.
.TP
.B HOMA_RECV_NONBLOCKING
If no appropriate message is available, the call will return immediately
with an
.B EAGAIN
error, rather than blocking.
.TP
.B HOMA_RECV_PARTIAL
Do not delete the incoming message if
.I message_buf
was not large enough to hold all the (remaining) bytes of the message.
.PP
The desired message(s) can be specified in any or all of three different
ways. First, if
.I flags
contains
.B HOMA_RECV_REQUEST
then any new request message may be returned.
Second, if
.I flags
contains
.B HOMA_RECV_RESPONSE
then any new response message may be returned.
Third, if
.I *id
is nonzero then a message matching
.I *id
and
.I *src_addr
may be returned: if the desired message is a request
(the low-order bit of
.I *id
is 1), then
.I *src_addr
is used along with
.I *id
to specify the message; if the desired message is a response (the
low-order bit of
.I *id
is 0), then
.I *id
already specifies the message uniquely, so
.I *src_addr
is ignored.
.PP
The identifier for the received message is returned at
.IR *id ;
its low-order bit indicates whether the message is a request (1)
or response (0).
The source address for the received message is returned in the buffer
pointed to by
.IR src_addr ,
which can hold either an IPv4 or IPv6 address:
.PP
.in +4n
.ps -1
.vs -2
.EX
typedef union sockaddr_in_union {
    struct sockaddr sa;
    struct sockaddr_in in4;
    struct sockaddr_in6 in6;
} sockaddr_in_union;
.EE
.vs +2
.ps +1
.in
.PP
If
.I
msglen
is non-NULL then the total length of the incoming message is
written to
.IR *msglen .
If
.IR completion_cookie
is non_NULL, then the completion cookie for the RPC will be
written to
.IR *completion_cookie .
If the message is a request, the completion cookie will be 0.
If the message is a response, the completion cookie will be the
value passed to
.IR homa_send .
.PP
If a message is a request, then the caller must eventually invoke
.BR homa_reply (3)
to respond (Homa retains state for the request until
.BR homa_reply (3)
is invoked).
.PP
If a message is larger than buffer space provided,
.BR homa_recv
or
.BR homa_recvv
may be invoked again to read additional bytes. Each call returns the next
unread bytes. Subsequent invocations must identify the message
explicitly with
.IR id
and
.I src_addr (the
.B HOMA_RECV_REQUEST
and
.B HOMA_RECV_RESPONSE
flags will not return messages that have already been partially read).
When a response message is returned, the message is normally deleted,
even if there wasn't enough buffer space to hold the entire message.
However, if
.B HOMA_RECV_PARTIAL
is specified in
.IR flags ,
then the message will be retained if there wasn't enough room to
return the entire message. The caller should invoke
.B homa_recv
or
.B homa_recvv
again to read the remaining bytes. Once the entire message has
been read, or
.B homa_recv
is invoked without specifying
.BR HOMA_RECV_PARTIAL ,
the message will be deleted. There is no need to specify
.B HOMA_RECV_PARTIAL
when receiving request messages, since requests are automatically
retained until the corresponding responses have been sent.

.B homa_recvp
is similar to
.B homa_recv
and
.B homa_recvv
except that the arguments and return values are all packed into a
structure:
.PP
.in +4n
.ps -1
.vs -2
.EX
struct homa_recv_args {
    void *message_buf;
    const struct iovec *iovec;
    size_t length;
    sockaddr_in_union source_addr;
    int flags;
    uint64_t id;
    uint64_t completion_cookie;
};
.EE
.vs +2
.ps +1
.in
.PP
The
.I message_buf
and
.I iovec
fields indicate where the incoming message should be stored; exactly one of
these should be non-null.
The
.I length
field is initially set to indicate the size of
.I message_buf
or
.IR iovec ;
it is also used to return the total length of the received message.
The address from which the message was sent will be returned in
.IR source_addr .
.I flags
field has the same meaning as in
.BR homa_recv .
The
.I id
field is treated the same way as
.I *id
in
.BR homa_recv ;
its intial value is used to filter incoming messages, and it is also
used to return the identifier of the received message.
If the received message is a response,
.I completion_cookie
is used to return the value specified when the request was sent;
otherwise it will be zero.


.SH RETURN VALUE
On success, the return value is the number of bytes stored at
.IR message_buf .
On error, \-1 is returned and
.I errno
is set appropriately. If
.I *id
is nonzero after an error return, it means that the error relates to
that particular RPC. For response messages, this means that the RPC
failed (e.g., if
.B EHOSTUNREACH
or
.B ENOTCONN
is returned). For request messages, this can happen after
.B EFAULT
errors (the kernel couldn't write to user space to return the message
or other metadata associated with the system call).
.SH ERRORS
.TP
.B EAGAIN
No appropriate message was available and
.B HOMA_RECV_NONBLOCKING
was specified in
.IR flags .
.TP
.B EBADF
.I sockfd
is not a valid open file descriptor.
.TP
.B EFAULT
An invalid user space address was specified for an argument.
.TP
.B EHOSTUNREACH
No route could be found to the destination host.
.TP
.B EINTR
A signal occurred before a message was received; see
.BR signal (7).
.TP
.B EINVAL
The file descriptor
.I sockfd
did not refer to a Homa socket, or the argument
.I flags
did not contain either
.BR HOMA_RECV_REQUEST " or " HOMA_RECV_RESPONSE ,
or there was no outstanding request with an id matching
.IR *id ,
or there was not enough space at
.I *src_addr
to store the source address.
.TP
.B ENOTCONN
No socket is bound to the destination port for the request.
.TP
.B EPROTONOSUPPORT
The destination machine does not support the Homa protocol.
.TP
.B ENOMEM
No memory available.
.TP
.B ESHUTDOWN
The socket has been disabled using
.BR shutdown (2).
.TP
.B ETIMEDOUT
The destination server did not respond to protocol requests.
.SH SEE ALSO
.BR homa_abort (3),
.BR homa_reply (3),
.BR homa_send (3),
.BR homa (7)
