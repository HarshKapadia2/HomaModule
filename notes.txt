Notes for Homa implementation in Linux:
---------------------------------------

* Things to do:
  * Figure out socket locking disciplines.
  * Many unimplemented interface functions.
  * Learn about CONFIG_COMPAT and whether it needs to be supported in
    struct proto and struct proto_ops.
  * Learn about security stuff, and functions that need to be called for this.
  * Learn about memory management for sk_buffs: how many is it OK to have?
  * Initially using simple lists for all tables; will need to replace with
    something more efficient.
  * Eventually initialize homa.next_client_port to something random
  * homa_message_out_init: compute unscheduled bites and priority better.
  * Routes: what is the lifetime of these? How long can I retain a pointer?
    Can they get stale?
  * Define a standard mechanism for returning errors:
    * Socket not supported on server (or server process ends while
      processing request).
    * Server timeout
    * Homa protocol not supported by server
  * Figure out what to do with byte order for 64-bit entities like RPC ids.
    There is no htonll, for some reason.
  * Is it safe to use non-locking skb queue functions?
  * Is the RCU usage for sockets safe? In particular, how long is it safe
    to use a homa_sock returned by homa_find_socket? Could it be deleted from
    underneath us? This question may no longer be relevant, given the
    implementation of homa_find_socket.
  * Can a packet input handler be invoked multiple times concurrently?
  * What is audit_sockaddr? Do I need to invoke it when I read sockaddrs
    from user space?
  * When a struct homa is destroyed, all of its sockets end up in an unsafe
    state in terms of their socktab links.
  * Is current logging safe if a socket gets deleted while a packet is
    being received?
  * If there is an error in ip_queue_xmit, does it free the packet?
  * homa_manage_grants: can "other" go away at an inconvenient time, causing
    synchronization problems?
  * homa_server_rpc and homa_client_rpc are now almost identical!
  * Modify homa_message_out_init to get unscheduled from homa->rtt_bytes.
  * Clean up ports and ips in unit_homa_incoming.c
  * Priority levels: isn't there something funny with the lowest two levels?
  * Plug into Linux capability mechanism (man(7) capabilities)

* Notes on combining the RPC classes:
  * Move dispatcher to homa_incoming

* Detailed switches from normal module builds:
gcc -Wp,-MD,/home/ouster/remote/homaModule/.homa_plumbing.o.d  -nostdinc -isystem /usr/lib/gcc/x86_64-linux-gnu/4.9/include -I./arch/x86/include -I./arch/x86/include/generated  -I./include -I./arch/x86/include/uapi -I./arch/x86/include/generated/uapi -I./include/uapi -I./include/generated/uapi -include ./include/linux/kconfig.h -D__KERNEL__ -DCONFIG_CC_STACKPROTECTOR -Wall -Wundef -Wstrict-prototypes -Wno-trigraphs -fno-strict-aliasing -fno-common -fshort-wchar -Werror-implicit-function-declaration -Wno-format-security -std=gnu89 -fno-PIE -mno-sse -mno-mmx -mno-sse2 -mno-3dnow -mno-avx -m64 -falign-jumps=1 -falign-loops=1 -mno-80387 -mno-fp-ret-in-387 -mpreferred-stack-boundary=3 -mtune=generic -mno-red-zone -mcmodel=kernel -funit-at-a-time -DCONFIG_X86_X32_ABI -DCONFIG_AS_CFI=1 -DCONFIG_AS_CFI_SIGNAL_FRAME=1 -DCONFIG_AS_CFI_SECTIONS=1 -DCONFIG_AS_FXSAVEQ=1 -DCONFIG_AS_SSSE3=1 -DCONFIG_AS_CRC32=1 -DCONFIG_AS_AVX=1 -DCONFIG_AS_AVX2=1 -DCONFIG_AS_AVX512=1 -DCONFIG_AS_SHA1_NI=1 -DCONFIG_AS_SHA256_NI=1 -pipe -Wno-sign-compare -fno-asynchronous-unwind-tables -mindirect-branch=thunk-extern -mindirect-branch-register -DRETPOLINE -fno-delete-null-pointer-checks -O2 --param=allow-store-data-races=0 -DCC_HAVE_ASM_GOTO -Wframe-larger-than=2048 -fstack-protector -Wno-unused-but-set-variable -fno-var-tracking-assignments -g -pg -mfentry -DCC_USING_FENTRY -Wdeclaration-after-statement -Wno-pointer-sign -fno-strict-overflow -fno-merge-all-constants -fmerge-constants -fno-stack-check -fconserve-stack -Werror=implicit-int -Werror=strict-prototypes -Werror=date-time  -DMODULE  -DKBUILD_BASENAME='"homa_plumbing"'  -DKBUILD_MODNAME='"homa"' -c -o /home/ouster/remote/homaModule/.tmp_homa_plumbing.o /home/ouster/remote/homaModule/homa_plumbing.c
   ./tools/objtool/objtool orc generate  --module --no-fp  --retpoline "/home/ouster/remote/homaModule/.tmp_homa_plumbing.o"

* TCP socket close: socket_file_ops in socket.c (.release)
  -> sock_close -> sock_release -> proto_ops.release
  -> inet_release (af_inet.c) -> sk->sk_prot->close
  -> tcp_close (tcp.c)

* How to pair requests and responses?
  * Choice #1: extend addresses to include an RPC id:
    * On client send, destination address has an id of 0; kernel fills in
      correct id.
    * On receive, the source address includes the RPC id (both client and server)
    * On server send, destination address has a non-zero id (the one from
      the receive): this is used to pair the response with a particular request.
    Analysis:
    * The RPC ID doesn't exactly fit as part of addresses, though it is close.
    * Doesn't require a change in API.
    * Can the kernel modify the address passed to sendmsg? What if the
      application invokes write instead of sendmsg?
  * Choice #2: perform sends and receives with an ioctl that can be used
    to pass RPC ids.
    Analysis:
    * Results in what is effectively a new interface.
  * Choice #3: put the RPC Id in the message at the beginning. The client
    selects the id, not the kernel, but the kernel will interpret these
    ids both on sends and receives.
    Analysis:
    * Awkward interaction between client and kernel, with the kernel
      now interpreting what used to be just an uninterpreted blob of data.
    * Will probably result in more application code to read and write
      the ids; unclear that this can be hidden from app.
  * Choice #4: define a new higher-level application API; it won't matter
    what the underlying kernel calls are:
    homa_send(fd, address, msg) -> id
    homa_recv(fd, buffer) -> id, length, sender_address, is_request
    homa_invoke(fd, address, request, response) -> response_length
    homa_reply(fd, address, id, msg)

* Waiting for input in TCP:
  * tcp_recvmsg (tcp.c) -> sk_wait_data (sock.c)
    * Waits for a packet to arrive in sk->sk_receive_queue (loops)
  * tcp_v4_rcv (tcp_ipv4.c) -> tcp_v4_do_rcv
    -> tcp_rcv_established  (tcp_input.c) -> sk->sk_data_ready
    -> sock_def_readable (sock.c)
    * Wakes up sk->sk_wq

* Waiting for input in UDP:
  * udp_recvmsg -> __skb_recv_udp -> __skb_wait_for_more_packets (datagram.c)
    * Sleeps process with no loop
  * udp_rcv -> __udp4_lib_rcv -> udp_queue_rcv_skb -> __udp_queue_rcv_skb
    -> __udp_enqueue_schedule_skb -> sk->sk_data_ready
    -> sock_def_readable (sock.c)
    * Wakes up sk->sk_wq

* Notes on waiting:
  * sk_data_ready function looks like it will do most of the work for waking
    up a sleeping process. sock_def_readable is the default implementation.

* On send:
  * Immediately copy message into sk_buffs.
  * Client assigns message id; it's the first 8 bytes of the message data.
  * Return before sending entire message.
  * Homa keeps track of outstanding requests (some limit per socket?).
  * If message fails, kernel must fabricate a response. Perhaps all
    responses start with an id and a status?

* Tables needed:
  * All Homa sockets
    * Used to assign new port numbers
    * Used to dispatch incoming packets
    * Need RCU or some other kind of locking?
  * Outgoing RPCs (for a socket?)
    * Used to find state for incoming packets
    * Used for cleanup operations (socket closure, cancellation, etc.)
    * Used for detecting timeouts
    * No locks needed: use existing socket lock
    * Or, have one table for all sockets?
  * Outgoing requests that haven't yet been transmitted:
    * For scheduling outbound traffic
    * Must be global?
  * Outgoing responses that haven't yet been transmitted:
    * For scheduling outbound traffic
    * Must be global?
  * Incoming RPCs:
    * Use to find state for incoming packets

* C++ data structures used in HomaTransport:
  * MessageAccumulator: std::vector of received packets, Buffer of
    assembled message
  * HomaTransport:
    * vectors of packets and messages
    * hash of outgoing RPCs
    * list of outgoing RPCs that haven't yet been transmitted
    * hash of incoming RPCs
    * list of RPCs that require timer attention

* Miscellaneous information:
  * For raw sockets: "man 7 raw"
  * Per-cpu data structures: linux/percpu.h, percpu-defs.h

* API for applications
  * Ideally, sends are asynchronous:
    * The send returns before the message has been sent
    * Data has been copied out of application-level buffers, so
      buffers can be reused
  * Must associate requests and responses:
    * A response is different from a request.
    * Kernel may need to keep track of open requests, so that it
      can handle RESEND packets appropriately; what if application
      doesn't respond, and an infinite backlog of open requests
      builds up? Must limit the kernel state that accumulates.
    * Maybe application must be involved in RESENDs?
  * On receive, application must provide space for largest possible message
    * Or, receives must take 2 system calls, one to get the size and
      one to get the message.
  * Support a polling API for incoming messages?
    * Client provides buffer space in advance
    * Kernel fills in data as packets arrive
    * Client can poll memory to see when new messages arrive
    * This would minimize sk_buff usage in the kernel
    * Is there a way for the kernel to access client memory when
      the process isn't active?
    * Can buffer space get fragmented? For example, the first part of
      a long message arrives, but the rest doesn't; meanwhile, buffers
      fill up and wrap around.
  * On receive, avoid copies of large message bodies? E.g., deliver only
    header to the application, then it can come back later and request
    that the body be copied to a particular spot.
  * Provide a batching mechanism to avoid a kernel call for each message?

* What happens when a socket is closed?
  * socket.c:sock_close
    * socket.c:sock_release
      * proto_ops.release -> af_inet.c:inet_release)
      * af_inet.c:inet_release doesn't appear to do anything relevant to Homa
        * proto.close -> sock.c:sk_common_release?)
          * proto.unhash
          * sock_orphan
          * sock_put (decrements ref count, frees)

* What happens in a connect syscall (UDP)?
  * socket.c:sys_connect
    * proto_ops.connect -> af_inet.c:inet_dgram_connect
      * proto.connect -> datagram.c:ip4_datagram_connect
        * datagram.c: __ip4_datagram_connect

* What happens in a bind syscall (UDP)?
  * socket.c:sys_bind
    * proto_ops.bind -> afinet.c:inet_bind
      * proto.bind -> (not defined for UDP)
      * If no proto.bind handler, then a bunch of obscure -looking stuff
        happens.

* What happens in a sendmsg syscall (UDP)?
  * socket.c:sys_sendmsg
    * socket.c:__sys_sendmsg
      * socket.c:___sys_sendmsg
        * Copy to msghdr and control info to kernel space
        * socket.c:sock_sendmsg
          * socket.c:sock_sendmsg_nosec
          * proto_ops.sendmsg -> afinet.c:inet_sendmsg
            * Auto-bind socket, if not bound
            * proto.sendmsg -> udp.c:udp_sendmsg
              * Long method ...
              * ip_output.c:ip_make_skb
                * Seems to collect data for the datagram?
                * __ip_append_data
              * udp.c:udp_send_skb
                * Creates UDP header
                * ip_output.c:ip_send_skb
                  * ip_local_out

ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDYB4VgPW3K9R2bx4MdcUwPP4xEwxuY2HyYzaDEGODfJQZ6UilCzCltsHhIjpHD6XoY+ZhOoPwGdpmxL21HBlIjKIcsvrRGBYbeEY8UA1QlcjsD3vtYI66JF/BC3OzIobrQnRpaYbKoAslsrg7B04z8SIV27hWq16lxq0yUOx+mXdwGAnnpbcHsoXjHRPc1gSZ1FAfiywKMyc3QE7MVv5U7dIXa+2tRf5zd5BcfG6LWSpjb5MxBbkdTXskTX1XMA9LvNHUWC0C9+1tfHPldmsv0gJxE/oLE5vGWBnMgN8dz+RBg9ymQ0P6tvnGnQZnTvIQyvbWzZbDE8unM+FihL7bZCJkJJgLNBz4AXTpr4aLdgmt5KP5BK94HvWUKdo2Nrx/aOOIL95CS+0JTVXCrGQdQXxZYaGRxwvSMAEdukBBZlet61K1dSPJDfmZ53ckVqqaQSKsKjwkEl26BUcUrTvERiz6c/3IzrXKZim2PbfVmO45fXnvgm8Wk6v3VrIMT/krdJkmoZHwzmZPrev5B1ZA67Sy6xPI/bQNF+zXad8AWHdXPK7yKD++4HgNnT+Xzg9aoRzYW0cgAnwpjRJf8XPfYneBMxF03Z1/f/eBbPDGkPtcoJUFLviRffsEzpdrvCfuh57rh5/PivoISaBdKd8LwJ6uaTzboG3uSsMRk20Ik1w== ouster@cs.stanford.edu
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDYB4VgPW3K9R2bx4MdcUwPP4xEwxuY2HyYzaDEGODfJQZ6UilCzCltsHhIjpHD6XoY+ZhOoPwGdpmxL21HBlIjKIcsvrRGBYbeEY8UA1QlcjsD3vtYI66JF/BC3OzIobrQnRpaYbKoAslsrg7B04z8SIV27hWq16lxq0yUOx+mXdwGAnnpbcHsoXjHRPc1gSZ1FAfiywKMyc3QE7MVv5U7dIXa+2tRf5zd5BcfG6LWSpjb5MxBbkdTXskTX1XMA9LvNHUWC0C9+1tfHPldmsv0gJxE/oLE5vGWBnMgN8dz+RBg9ymQ0P6tvnGnQZnTvIQyvbWzZbDE8unM+FihL7bZCJkJJgLNBz4AXTpr4aLdgmt5KP5BK94HvWUKdo2Nrx/aOOIL95CS+0JTVXCrGQdQXxZYaGRxwvSMAEdukBBZlet61K1dSPJDfmZ53ckVqqaQSKsKjwkEl26BUcUrTvERiz6c/3IzrXKZim2PbfVmO45fXnvgm8Wk6v3VrIMT/krdJkmoZHwzmZPrev5B1ZA67Sy6xPI/bQNF+zXad8AWHdXPK7yKD++4HgNnT+Xzg9aoRzYW0cgAnwpjRJf8XPfYneBMxF03Z1/f/eBbPDGkPtcoJUFLviRffsEzpdrvCfuh57rh5/PivoISaBdKd8LwJ6uaTzboG3uSsMRk20Ik1w== ouster@cs.stanford.edu
