#!/usr/bin/python3

# Copyright (c) 2020 Stanford University
#
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

# This cperf benchmark measures Homa slowdown as the number of available
# priority levels is varied.
# Type "cp_prios --help" for documentation.

from cperf import *

# Number of priority levels to try for each workload.
priorities = [1, 2, 3, 4, 8]

parser = get_parser(description=
        'Measures Homa slowdown as the number of available priority levels '
        'varies.',
        usage='%(prog)s [options]',
        defaults={
            "server_ports":         3,
            "port_threads":         3,
            "client_ports":         3,
            "port_receivers":       2,
            "tcp_server_ports":     9,
            "tcp_client_ports":     4,
            "workload":             ""
        })
options = parser.parse_args()
init(options)
servers = range(0, options.num_nodes)
clients = range(0, options.num_nodes)

if options.workload != "":
    load_info = [[options.workload, options.gbps]];

if not options.plot_only:
    try:
        # Start servers and measure unloaded latencies.
        start_servers(servers, options)

        # For each workload, run a set of experiments with varying numbers
        # of priority levels.
        for workload, bw in load_info:
            options.workload = workload
            options.gbps = bw/2.0

            o = copy.deepcopy(options);
            o.client_ports = 1
            o.client_max = 1
            o.server_ports = 1
            o.server_nodes = 1
            o.first_server = 1
            o.unloaded = 500
            run_experiment("unloaded_" + workload, range(0, 1), o)

            for prios in priorities:
                log("Configuring Homa for %d priority levels" % (prios))
                set_sysctl_parameter(".net.homa.num_priorities", prios,
                        range(0, options.num_nodes))
                run_experiment("homa_%s_%dprios" % (workload, prios), clients,
                        options)
    except Exception as e:
        log(traceback.format_exc())
                   
    set_sysctl_parameter(".net.homa.num_priorities", 8,
            range(0, options.num_nodes))
    log("Stopping nodes")
    stop_nodes()
    scan_logs()

# Generate plots and reports
for workload, bw in load_info:
    set_unloaded("unloaded_" + workload)
    # Generate slowdown plot.
    log("Generating slowdown plot for %s" % (workload))
    title = "%s %d nodes, %.1f Gbps" % (workload.capitalize(),
            options.num_nodes, bw)
    ax = start_slowdown_plot(title, 1000, "homa_%s_%dprios" % (workload,
            priorities[-1]))
    colors = ['#985416', '#ff7f0e', '#d62728', '#9467bd', homa_color]
    for prios in priorities:
        if prios == 1:
            label = "1 prio"
        else:
            label = "%d prios" % prios
        plot_slowdown(ax, "homa_%s_%dprios" % (workload,prios), "p99", label,
                color=colors.pop(0))
    if workload == "w5":
        ax.legend(loc="upper right", prop={'size': 9})
    else:
        ax.legend(loc="upper left", prop={'size': 9})
    plt.tight_layout()
    plt.savefig("%s/reports/prios_%s.pdf" % (options.log_dir, workload))
