#!/usr/bin/python3

# Copyright (c) 2020 Stanford University
#
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

# This cperf benchmark compares the performance of Homa with TCP.
# Type "cp_vs_tcp --help" for documentation.

from cperf import *

# Info to use (workload and corresponding bandwidth) when running all
# of the workloads.
load_info = [["w1", 0.2], ["w2", 0.4], ["w3", 1.8], ["w4", 2.4], ["w5", 2.4]]

parser = get_parser(description=
        'Measures slowdown as a function of message size for Homa and TCP.',
        usage='%(prog)s [options]',
        defaults={
            "server_ports":         3,
            "port_threads":         3,
            "client_ports":         3,
            "port_receivers":       2,
            "tcp_server_ports":     8,
            "tcp_port_threads":     1,
            "tcp_client_ports":     4,
            "tcp_receiver_threads": 1,
            "workload":             ""
        })
parser.add_argument('--tcp', dest='tcp', type=boolean,
        default=True, help="Boolean value indicates whether measurements "
                "should be run on TCP")
parser.add_argument('--dctcp', dest='dctcp', type=boolean,
        default=False, help="Boolean value indicates whether measurements "
                "should be run on DCTCP")
options = parser.parse_args()
init(options)
servers = range(0, options.num_nodes)
clients = range(0, options.num_nodes)

if options.workload != "":
    load_info = [[options.workload, options.net_bw]];

# First, run all of the experiments
if not options.plot_only:
    congestion = get_sysctl_parameter("net.ipv4.tcp_congestion_control")
    print("TCP congestion control: %s" % (congestion))
    for workload, bw in load_info:
        options.workload = workload
        options.net_bw = bw/2.0
        unloaded_exp = "unloaded_" + workload;
        homa_exp = "homa_" + workload;
        tcp_exp = "tcp_" + workload;
        dctcp_exp = "dctcp_" + workload;
        try:
            options.protocol = "homa"
            start_servers(servers, options)

            o = copy.deepcopy(options);
            o.net_bw = 0.0
            o.client_ports = 1
            o.client_max = 1
            o.server_ports = 1
            o.server_nodes = 1
            o.first_server = 1
            o.seconds = 5
            run_experiment(unloaded_exp, range(0, 1), o)

            run_experiment(homa_exp, clients, options)

            if options.tcp:
                options.protocol = "tcp"
                do_ssh(["sudo", "sysctl",
                        ".net.ipv4.tcp_congestion_control=cubic"],
                        range(0, options.num_nodes))
                start_servers(servers, options)
                run_experiment(tcp_exp, clients, options)

            if options.dctcp:
                do_ssh(["sudo", "sysctl",
                        ".net.ipv4.tcp_congestion_control=dctcp"],
                        range(0, options.num_nodes))
                start_servers(servers, options)
                run_experiment(dctcp_exp, clients, options)
        except Exception as e:
            log(traceback.format_exc())

    if options.tcp or options.dctcp:
        print("Resetting TCP congestion control to %s" % (congestion))
        set_sysctl_parameter("net.ipv4.tcp_congestion_control", congestion,
                range(0, options.num_nodes))
    log("Stopping nodes")
    stop_nodes()
    scan_logs()

# Generate plots and reports
for workload, bw in load_info:
    unloaded_exp = "unloaded_" + workload;
    homa_exp = "homa_" + workload;
    tcp_exp = "tcp_" + workload;
    dctcp_exp = "dctcp_" + workload;

    set_unloaded(unloaded_exp)

    # Generate slowdown plot.
    log("Generating slowdown plot for %s" % (workload))
    title = "%s %d nodes, %.2f GB/s" % (workload.capitalize(),
            options.num_nodes, bw)
    start_slowdown_plot(title, 1000, homa_exp)
    if options.tcp:
        plot_slowdown(tcp_exp, "p99", "TCP P99", color=tcp_color)
        plot_slowdown(tcp_exp, "p50", "TCP P50", color=tcp_color2)
    if options.dctcp:
        plot_slowdown(dctcp_exp, "p99", "DCTCP P99", color=dctcp_color)
        plot_slowdown(dctcp_exp, "p50", "DCTCP P50", color=dctcp_color2)
    plot_slowdown(homa_exp, "p99", "Homa P99", color=homa_color)
    plot_slowdown(homa_exp, "p50", "Homa P50", color=homa_color2)
    if workload == "w5":
        plt.legend(loc="upper right", prop={'size': 9})
    else:
        plt.legend(loc="upper left", prop={'size': 9})
    plt.tight_layout()
    plt.savefig("%s/reports/vs_tcp_%s.pdf" % (options.log_dir, workload))

    # Generate CDF of small-message RTTs.
    log("Generating short message CDF for %s" % (workload))
    unloaded_x, unloaded_y = get_short_cdf(unloaded_exp)
    homa_x, homa_y = get_short_cdf(homa_exp)
    if options.tcp:
        tcp_x, tcp_y = get_short_cdf(tcp_exp)
    if options.dctcp:
        dctcp_x, dctcp_y = get_short_cdf(dctcp_exp)
    start_cdf_plot(title, 10, 0.99e05, 1e-05, "RTT (usecs)",
            "Cumulative Fraction Short Messages")
    if options.tcp:
        plt.plot(tcp_x, tcp_y, label="TCP", color=tcp_color)
    if options.dctcp:
        plt.plot(dctcp_x, dctcp_y, label="DCTCP", color=dctcp_color)
    plt.plot(homa_x, homa_y, label="Homa", color=homa_color)
    plt.plot(unloaded_x, unloaded_y, label="Homa best case", color=unloaded_color)
    plt.legend(loc="upper right", prop={'size': 9})
    plt.savefig("%s/reports/short_cdf_%s.pdf" % (options.log_dir, workload))
