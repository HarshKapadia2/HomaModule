#!/usr/bin/python3

# Copyright (c) 2020 Stanford University
#
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

# This cperf benchmark measures Homa slowdown while varying one or more
# aspects of Homa's configuration (such as duty cycle).
# Type "cp_config --help" for documentation.

from cperf import *

# Number of priority levels to try for each workload.
priorities = [1, 2, 3, 4, 8]

load_info = [["w2", 3.2], ["w3", 14], ["w4", 20], ["w5", 20]]

parser = get_parser(description=
        'Measures Homa slowdown as the number of available priority levels '
        'varies.',
        usage='%(prog)s [options]',
        defaults={
            "server_ports":         3,
            "port_threads":         3,
            "client_ports":         3,
            "port_receivers":       2,
            "tcp_server_ports":     9,
            "tcp_client_ports":     4,
            "workload":             ""
        })
parser.add_argument('-c', '--config', dest='config',
        choices=['duty_cycle', 'fifo', 'prios', 'rtt_bytes'], required = True,
        help='Aspect of configuration to change must be duty_cycle')
options = parser.parse_args()
init(options)
servers = range(0, options.num_nodes)
clients = range(0, options.num_nodes)

if options.workload != "":
    load_info = [[options.workload, options.gbps]];

if options.config == 'duty_cycle':
    specs = {
        'parameter': '.net.homa.duty_cycle',
        'values': [1000, 800, 600, 400],
        'exp_name': 'duty',
        'label': "duty_cycle %d"
    }
elif options.config == 'fifo':
    specs = {
        'parameter': '.net.homa.grant_fifo_fraction',
        'values': [0, 100, 200, 400],
        'parameter2': '.net.homa.pacer_fifo_fraction',
        'values2': [0, 50, 100, 200],
        'exp_name': 'fifo',
        'label': "fifo_fraction %d"
    }
elif options.config == 'prios':
    specs = {
        'parameter': '.net.homa.num_priorities',
        'values': [1, 2, 3, 4, 8],
        'exp_name': 'prios',
        'label': "%d priorities"
    }
elif options.config == 'rtt_bytes':
    specs = {
        'parameter': '.net.homa.rtt_bytes',
        'values': [40000, 60000, 70000, 100000],
        'exp_name': 'rttb',
        'label': "rtt_bytes %d"
    }

old_value = get_sysctl_parameter(specs['parameter'])
if not options.plot_only:
    try:
        # Start servers and measure unloaded latencies.
        start_servers(servers, options)

        # For each workload, run a set of experiments with a different
        # configurations.
        for workload, bw in load_info:
            options.workload = workload
            options.gbps = bw/2.0

            o = copy.deepcopy(options);
            o.client_ports = 1
            o.client_max = 1
            o.server_ports = 1
            o.server_nodes = 1
            o.first_server = 1
            o.unloaded = 500
            run_experiment("unloaded_" + workload, range(0, 1), o)

            for i in range(0, len(specs['values'])):
                value = specs['values'][i]
                exp_name = "%s_%s_%s" % (workload, specs['exp_name'], value)
                log("Setting %s = %s" % (specs['parameter'], value))
                set_sysctl_parameter(specs['parameter'], value,
                        range(0, options.num_nodes))
                if 'parameter2' in specs:
                    value2 = specs['values'][i]
                    log("Setting %s = %s" % (specs['parameter2'], value2))
                    set_sysctl_parameter(specs['parameter2'], value2,
                            range(0, options.num_nodes))
                run_experiment(exp_name, clients, options)
    except Exception as e:
        log(traceback.format_exc())
                   
    set_sysctl_parameter(specs['parameter'], old_value,
            range(0, options.num_nodes))
    log("Stopping nodes")
    stop_nodes()
    scan_logs()

# Generate plots and reports
for workload, bw in load_info:
    set_unloaded("unloaded_" + workload)
    # Generate slowdown plot.
    log("Generating slowdown plot for %s" % (workload))
    title = "%s %d nodes, %.1f Gbps" % (workload.capitalize(),
            options.num_nodes, bw)
    ax = start_slowdown_plot(title, 1000, "%s_%s_%s" % (workload,
            specs['exp_name'], specs['values'][0]), y_label="P99 Slowdown")
    for value in specs['values']:
        exp_name = "%s_%s_%s" % (workload, specs['exp_name'], value)
        label = specs['label'] % (value)
        plot_slowdown(ax, exp_name, "p99", label)
    if workload == "w5":
        ax.legend(loc="upper right", prop={'size': 9})
    else:
        ax.legend(loc="upper left", prop={'size': 9})
    plt.tight_layout()
    plt.savefig("%s/reports/%s_%s.pdf" %
            (options.log_dir, specs['exp_name'], workload))
